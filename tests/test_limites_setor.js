/**
 * Teste dos limites de agendamento por setor
 * Valida se a l√≥gica de instala√ß√£o (1 por dia) vs manuten√ß√£o (2M/3T) funciona corretamente
 */

const { gerarSugestoesDeAgendamento, verificarDisponibilidadeData } = require('../services/ixcService');
const dayjs = require('dayjs');

async function testarLimitesSetor() {
  console.log('üß™ INICIANDO TESTES DE LIMITES POR SETOR');
  console.log('=' .repeat(60));

  // Teste 1: OS de Instala√ß√£o (setor 14)
  console.log('\nüìã TESTE 1: OS de Instala√ß√£o (Setor 14)');
  console.log('-'.repeat(40));
  
  const osInstalacao = {
    id: '12345',
    id_setor: '14', // Setor de instala√ß√£o
    id_assunto: 16,
    data_cadastro: '2025-01-10 10:00:00'
  };

  try {
    const sugestoesInstalacao = await gerarSugestoesDeAgendamento(osInstalacao);
    console.log('‚úÖ Sugest√µes para INSTALA√á√ÉO geradas:');
    console.log('   Sugest√£o principal:', sugestoesInstalacao.sugestao);
    console.log('   Alternativas:', sugestoesInstalacao.alternativas?.length || 0);
  } catch (error) {
    console.log('‚ùå Erro ao gerar sugest√µes de instala√ß√£o:', error.message);
  }

  // Teste 2: OS de Manuten√ß√£o (setor 13)  
  console.log('\nüìã TESTE 2: OS de Manuten√ß√£o (Setor 13)');
  console.log('-'.repeat(40));
  
  const osManutencao = {
    id: '12346',
    id_setor: '13', // Setor de manuten√ß√£o
    id_assunto: 19,
    data_cadastro: '2025-01-10 10:00:00'
  };

  try {
    const sugestoesManutencao = await gerarSugestoesDeAgendamento(osManutencao);
    console.log('‚úÖ Sugest√µes para MANUTEN√á√ÉO geradas:');
    console.log('   Sugest√£o principal:', sugestoesManutencao.sugestao);
    console.log('   Alternativas:', sugestoesManutencao.alternativas?.length || 0);
  } catch (error) {
    console.log('‚ùå Erro ao gerar sugest√µes de manuten√ß√£o:', error.message);
  }

  // Teste 3: Verificar disponibilidade espec√≠fica
  console.log('\nüìã TESTE 3: Verifica√ß√£o de Disponibilidade');
  console.log('-'.repeat(40));
  
  const amanha = dayjs().add(1, 'day').format('YYYY-MM-DD');
  
  try {
    const dispInstalacao = await verificarDisponibilidadeData(osInstalacao, {
      data: amanha,
      periodo: 'M'
    });
    console.log('‚úÖ Disponibilidade INSTALA√á√ÉO (manh√£):', dispInstalacao);

    const dispManutencao = await verificarDisponibilidadeData(osManutencao, {
      data: amanha, 
      periodo: 'T'
    });
    console.log('‚úÖ Disponibilidade MANUTEN√á√ÉO (tarde):', dispManutencao);
    
  } catch (error) {
    console.log('‚ùå Erro ao verificar disponibilidade:', error.message);
  }

  // Teste 4: OS com setor n√£o configurado (fallback)
  console.log('\nüìã TESTE 4: OS com Setor N√£o Configurado');
  console.log('-'.repeat(40));
  
  const osDesconhecida = {
    id: '12347',
    id_setor: '999', // Setor n√£o configurado
    id_assunto: 1,
    data_cadastro: '2025-01-10 10:00:00'
  };

  try {
    const sugestoesFallback = await gerarSugestoesDeAgendamento(osDesconhecida);
    console.log('‚úÖ Sugest√µes para setor DESCONHECIDO (fallback):');
    console.log('   Sugest√£o principal:', sugestoesFallback.sugestao);
    console.log('   Alternativas:', sugestoesFallback.alternativas?.length || 0);
  } catch (error) {
    console.log('‚ùå Erro ao gerar sugest√µes fallback:', error.message);
  }

  console.log('\n' + '='.repeat(60));
  console.log('üèÅ TESTES CONCLU√çDOS');
}

// Executar testes
if (require.main === module) {
  testarLimitesSetor().catch(console.error);
}

module.exports = { testarLimitesSetor };
